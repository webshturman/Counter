{"version":3,"sources":["App.module.css","bll/actions.ts","Components/Counter.tsx","Components/Button.tsx","Components/CountResult.tsx","Components/InputSet.tsx","Components/CountSet.tsx","App.tsx","reportWebVitals.ts","bll/counter-reducer.ts","bll/store.ts","bll/utils/localstorage-utils.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE","Counter","React","memo","props","useSelector","state","counter","minValue","maxValue","count","correctData","limitClass","s","limit","className","errorClass","message","Button","callback","title","condition","disabled","buttons","onClick","resetCountResultAC","type","RESET_COUNTER_RESULT_TYPE","payload","CountResult","dispatch","useDispatch","container","buttonBlock","CHANGE_COUNTER_RESULT_TYPE","changeCountResultAC","InputSet","value","changingValue","inputError","redInput","spanInputValue","inputValueBlock","spanInputTitle","onChange","e","newInputValue","Number","currentTarget","CountSet","countSetter","CHANGE_MAX_VALUE_TYPE","changeMaxValueAC","CHANGE_MIN_VALUE_TYPE","changeMinValueAC","App","bothCounters","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InitialState","rootReducer","combineReducers","action","store","createStore","storageItem","localStorage","getItem","JSON","parse","err","getFromStorage","subscribe","setItem","stringify","setToStorage","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51a9445d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bothCounters\":\"App_bothCounters__3gPmO\",\"container\":\"App_container__Gw0hg\",\"buttons\":\"App_buttons__2jeqC\",\"counter\":\"App_counter__1N54d\",\"buttonBlock\":\"App_buttonBlock__2iESY\",\"limit\":\"App_limit__1oH3s\",\"message\":\"App_message__yZwKb\",\"errorClass\":\"App_errorClass__v225h\",\"countSetter\":\"App_countSetter__3mV2S\",\"inputValueBlock\":\"App_inputValueBlock__1qH7v\",\"spanInputTitle\":\"App_spanInputTitle__3ykRX\",\"spanInputValue\":\"App_spanInputValue__1XztC\",\"redInput\":\"App_redInput__2Y172\"};","export enum ACTIONS_TYPE {\r\n    CHANGE_MAX_VALUE_TYPE = 'CounterSet/CHANGE_MAX_VALUE_TYPE',\r\n    CHANGE_MIN_VALUE_TYPE = 'CounterSet/CHANGE_MIN_VALUE_TYPE',\r\n    CHANGE_COUNTER_RESULT_TYPE = 'CounterResult/CHANGE_COUNTER_RESULT_TYPE ',\r\n    RESET_COUNTER_RESULT_TYPE = 'CounterResult/RESET_COUNTER_RESULT_TYPE ',\r\n}\r\nexport type ActionType = changeMinValueType | changeMaxValueType | changeCountResultType | resetCountResultType\r\n\r\nexport type changeMinValueType = {\r\n    type:ACTIONS_TYPE.CHANGE_MIN_VALUE_TYPE,\r\n    payload: {minValue:number,correctData:boolean}\r\n\r\n}\r\nexport type changeMaxValueType = {\r\n    type:ACTIONS_TYPE.CHANGE_MAX_VALUE_TYPE,\r\n    payload: {maxValue:number,correctData:boolean}\r\n}\r\nexport type changeCountResultType = {\r\n    type:ACTIONS_TYPE.CHANGE_COUNTER_RESULT_TYPE,\r\n    count:number\r\n}\r\nexport type resetCountResultType = {\r\n    type:ACTIONS_TYPE.RESET_COUNTER_RESULT_TYPE ,\r\n    payload: {count:number, correctData:boolean}\r\n}\r\n\r\nexport const changeMinValueAC = (minValue:number,correctData:boolean):changeMinValueType => {\r\n    return {type:ACTIONS_TYPE.CHANGE_MIN_VALUE_TYPE, payload:{minValue,correctData}}\r\n}\r\nexport const changeMaxValueAC = (maxValue:number,correctData:boolean):changeMaxValueType => {\r\n    return {type:ACTIONS_TYPE.CHANGE_MAX_VALUE_TYPE, payload:{maxValue,correctData}}\r\n}\r\nexport const changeCountResultAC = (count:number):changeCountResultType => {\r\n    return {type:ACTIONS_TYPE.CHANGE_COUNTER_RESULT_TYPE, count}\r\n}\r\nexport const resetCountResultAC = (count:number,correctData:boolean):resetCountResultType => {\r\n    return {type:ACTIONS_TYPE.RESET_COUNTER_RESULT_TYPE, payload:{count,correctData}}\r\n}","import React from 'react';\r\nimport s from '../App.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../bll/store\";\r\nimport {InitialStateType} from \"../bll/counter-reducer\";\r\n\r\n\r\nexport const Counter: React.FC = React.memo((props) => {\r\n    const {\r\n        minValue,\r\n        maxValue,\r\n        count,\r\n        correctData\r\n    } = useSelector<RootStateType, InitialStateType>(state => state.counter)\r\n    const limitClass = count === maxValue ? s.limit : ''\r\n    const message = `enter values and press 'set'`\r\n    const errorMessage = `Incorrect value!`\r\n    let renderCounter = () => {\r\n        if (minValue >= maxValue || minValue < 0) {\r\n            return <div className={s.errorClass}>{errorMessage}</div>\r\n        } else {\r\n            return correctData ? <div className={limitClass}>{count}</div> : <div className={s.message}>{message}</div>\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {renderCounter()}\r\n\r\n        </>\r\n\r\n    )\r\n});","import React from 'react';\r\nimport s from '../App.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../bll/store\";\r\nimport {InitialStateType} from \"../bll/counter-reducer\";\r\n\r\nexport type ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    condition?: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({callback, title, condition}) => {\r\n    const {minValue, maxValue} = useSelector<RootStateType, InitialStateType>(state => state.counter)\r\n    return (\r\n        <span><button disabled={minValue >= maxValue || minValue < 0 || condition} className={s.buttons}\r\n                      onClick={callback}>\r\n            {title}</button></span>\r\n    )\r\n}","import React from 'react';\r\nimport s from \"../App.module.css\";\r\nimport {Counter} from \"./Counter\";\r\nimport {Button} from \"./Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../bll/store\";\r\nimport {InitialStateType} from \"../bll/counter-reducer\";\r\nimport {changeCountResultAC, resetCountResultAC} from \"../bll/actions\";\r\n\r\n\r\nexport const CountResult: React.FC = React.memo((props) => {\r\n    const dispatch = useDispatch()\r\n    const {\r\n        minValue,\r\n        maxValue,\r\n        count,\r\n        correctData\r\n    } = useSelector<RootStateType, InitialStateType>(state => state.counter)\r\n    const changeCount = () => {\r\n        dispatch(changeCountResultAC(count))\r\n    }\r\n    const resetCount = () => {\r\n        dispatch(resetCountResultAC(minValue, true))\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.counter}>\r\n                <Counter/>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <Button callback={changeCount} title={'Inc'} condition={count === maxValue || !correctData}/>\r\n                <Button callback={resetCount} title={'Reset'} condition={count === minValue || !correctData}/>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"../App.module.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../bll/store\";\r\nimport {InitialStateType} from \"../bll/counter-reducer\";\r\n\r\n\r\ntype InputSetPropsType = {\r\n    title: string\r\n    value: number\r\n    changingValue: (newInputValue: number) => void\r\n}\r\nexport const InputSet: React.FC<InputSetPropsType> = React.memo(({title, value, changingValue}) => {\r\n    const {minValue, maxValue} = useSelector<RootStateType, InitialStateType>(state => state.counter)\r\n    const inputError = minValue >= maxValue || minValue < 0 ? s.redInput : s.spanInputValue\r\n    const changeValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newInputValue = Number(e.currentTarget.value)\r\n        changingValue(newInputValue)\r\n    }\r\n    return (\r\n        <div className={s.inputValueBlock}>\r\n            <span className={s.spanInputTitle}>{title}:</span>\r\n            <input value={value} type=\"number\" onChange={changeValueHandler} className={inputError}/>\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport s from \"../App.module.css\";\r\nimport {Button} from \"./Button\";\r\nimport {InputSet} from \"./InputSet\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../bll/store\";\r\nimport {InitialStateType} from \"../bll/counter-reducer\";\r\nimport {changeMaxValueAC, changeMinValueAC, resetCountResultAC} from \"../bll/actions\";\r\n\r\nexport const CountSet: React.FC = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {minValue, maxValue} = useSelector<RootStateType, InitialStateType>(state => state.counter)\r\n    const changingMinValue = (newInputValue: number) => {\r\n        dispatch(changeMinValueAC(newInputValue, false))\r\n    }\r\n    const changingMaxValue = (newInputValue: number) => {\r\n        dispatch(changeMaxValueAC(newInputValue, false))\r\n    }\r\n\r\n    const settingCount = () => {\r\n        dispatch(resetCountResultAC(minValue, true))\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.countSetter}>\r\n                <InputSet title={'Max value'} value={maxValue} changingValue={changingMaxValue}/>\r\n                <InputSet title={'Start value'} value={minValue} changingValue={changingMinValue}/>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <Button callback={settingCount} title={'Set'}/>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React, {useState} from 'react';\nimport s from './App.module.css'\nimport './App.css';\nimport {CountResult} from \"./Components/CountResult\";\nimport {CountSet} from \"./Components/CountSet\";\n\n\nfunction App() {\n    return (\n        <div className={s.bothCounters}>\n            <CountSet/>\n            <CountResult/>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ACTIONS_TYPE, ActionType} from \"./actions\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    minValue: number\r\n    maxValue: number\r\n    count: number\r\n    correctData: boolean\r\n}\r\nexport const InitialState = {\r\n    minValue: 0,\r\n    maxValue: 1,\r\n    count: 0,\r\n    correctData: true,\r\n}\r\n\r\n// export type InitialStateType = ReturnType<typeof InitialState>\r\nexport const counterReducer = (state: InitialStateType = InitialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_MIN_VALUE_TYPE:\r\n        case ACTIONS_TYPE.CHANGE_MAX_VALUE_TYPE:\r\n        case ACTIONS_TYPE.RESET_COUNTER_RESULT_TYPE:\r\n            return {...state, ...action.payload}\r\n        case ACTIONS_TYPE.CHANGE_COUNTER_RESULT_TYPE:\r\n            return {...state, count: action.count + 1}\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {getFromStorage, setToStorage} from \"./utils/localstorage-utils\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, getFromStorage())\r\n\r\nstore.subscribe( ()=> {\r\n    setToStorage( {\r\n        counter: store.getState().counter\r\n    })\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n","\r\nimport {RootStateType, store} from \"../store\";\r\n\r\n\r\n// export const getFromStorage = (key:string, defaultValue:InitialStateType)=> {\r\n//     let newValue = defaultValue\r\n//     let storageItem = localStorage.getItem(key);\r\n//     if(storageItem !== null){\r\n//         newValue = JSON.parse(storageItem)\r\n//     }\r\n//     return newValue\r\n// }\r\n// export const setToStorage =(key:string, value:InitialStateType)=> {\r\n//     localStorage.setItem(key,JSON.stringify(value));\r\n// }\r\n\r\nexport const getFromStorage = () => {\r\n    try {\r\n        let storageItem = localStorage.getItem('set count');\r\n        if (storageItem === null) {\r\n            return undefined\r\n        }\r\n        return JSON.parse(storageItem)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\nexport const setToStorage = (state: RootStateType) => {\r\n    try {\r\n        localStorage.setItem('set count', JSON.stringify(state))\r\n    } catch {\r\n\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}