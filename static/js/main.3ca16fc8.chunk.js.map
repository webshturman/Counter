{"version":3,"sources":["App.module.css","Components/Counter.tsx","Components/Button.tsx","Components/CountResult.tsx","Components/InputSet.tsx","Components/CountSet.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","count","limitClass","maxCount","s","limit","className","Button","callback","title","disabled","buttons","onClick","CountResult","minValue","maxValue","minCount","useState","setCount","container","counter","buttonBlock","InputSet","value","changingValue","spanInputTitle","type","onChange","spanInputValue","CountSet","setMaxValue","setMinValue","setToStorage","disabledCondition","countSetter","App","bothCounters","e","newMinValue","Number","currentTarget","newMaxValue","localStorage","setItem","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ca16fc8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bothCounters\":\"App_bothCounters__3gPmO\",\"container\":\"App_container__Gw0hg\",\"buttons\":\"App_buttons__2jeqC\",\"counter\":\"App_counter__1N54d\",\"buttonBlock\":\"App_buttonBlock__2iESY\",\"limit\":\"App_limit__1oH3s\",\"countSetter\":\"App_countSetter__3mV2S\",\"spanInputValue\":\"App_spanInputValue__1XztC\"};","import React from 'react';\r\nimport s from '../App.module.css'\r\n\r\n\r\nexport type CounterPropsType = {\r\n    count: number\r\n    maxCount:number\r\n}\r\n\r\n\r\nexport const Counter: React.FC<CounterPropsType> = ({count, maxCount}) => {\r\n    const limitClass = count === maxCount ? s.limit : ''\r\n    return (\r\n        <div className={limitClass}>{count}</div>\r\n    )\r\n}","import React from 'react';\r\nimport s from '../App.module.css'\r\n\r\nexport type ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    count: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({callback, title, count}) => {\r\n    return (\r\n        <span><button disabled={count} className={s.buttons} onClick={callback}>{title}</button></span>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport s from \"../App.module.css\";\r\nimport {Counter} from \"./Counter\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype CountResultPropsType ={\r\n    minValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const CountResult: React.FC<CountResultPropsType> = ({minValue,maxValue}) => {\r\n    let minCount = minValue\r\n    let maxCount = maxValue\r\n    let [count, setCount] = useState(minCount)\r\n    const changeCount = () => {\r\n            setCount(count + 1)\r\n    }\r\n    const resetCount = () => {\r\n        setCount(minCount)\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.counter}>\r\n                <Counter count={count} maxCount={maxCount}/>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <Button callback={changeCount} title={'Inc'} count={count === maxCount}/>\r\n                <Button callback={resetCount} title={'Reset'} count={count === minCount}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"../App.module.css\";\r\n\r\ntype InputSetPropsType = {\r\n    title: string\r\n    value: number\r\n    changingValue: (e:ChangeEvent<HTMLInputElement>)=> void\r\n}\r\nexport const InputSet: React.FC<InputSetPropsType> = ({title, value,changingValue}) => {\r\n    return (\r\n        <div>\r\n            <span className={s.spanInputTitle}>{title}:</span>\r\n            <input value={value} type=\"number\" onChange={changingValue} className={s.spanInputValue}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"../App.module.css\";\r\nimport {Counter} from \"./Counter\";\r\nimport {Button} from \"./Button\";\r\nimport {InputSet} from \"./InputSet\";\r\n\r\ntype CountSetPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: (e:ChangeEvent<HTMLInputElement>) => void\r\n    setMaxValue: (e:ChangeEvent<HTMLInputElement>) => void\r\n    setToStorage: () => void\r\n}\r\n\r\nexport const CountSet: React.FC<CountSetPropsType> = ({minValue, maxValue,setMaxValue, setMinValue, setToStorage}) => {\r\n    let disabledCondition = maxValue===minValue || minValue < 0\r\n    // const settingCount = () => {\r\n    //     console.log('Success')\r\n    // }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.countSetter}>\r\n                <InputSet title={'Max value'} value={maxValue} changingValue={setMaxValue}/>\r\n                <InputSet title={'Start value'} value={minValue} changingValue={setMinValue}/>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <Button callback={setToStorage} title={'Set'} count={disabledCondition}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\nimport s from './App.module.css'\nimport './App.css';\nimport {CountResult} from \"./Components/CountResult\";\nimport {CountSet} from \"./Components/CountSet\";\n\nfunction App() {\n    let [minValue, setMinValue] = useState(0)\n    let [maxValue, setMaxValue] = useState(1)\n\n    const changingMinValue =(e:ChangeEvent<HTMLInputElement>)=> {\n        let newMinValue = Number(e.currentTarget.value)\n        setMinValue(newMinValue)\n    }\n    const changingMaxValue =(e:ChangeEvent<HTMLInputElement>)=> {\n        let newMaxValue = Number(e.currentTarget.value)\n        setMaxValue(newMaxValue)\n    }\n    const setToStorage =()=> {\n        localStorage.setItem('set minValue',JSON.stringify(minValue));\n        localStorage.setItem('set maxValue',JSON.stringify(maxValue))\n    }\n    // const getFromStorage =()=> {\n    //     let minFromString = localStorage.getItem('set minValue');\n    //     if(minFromString ){\n    //         let newMinValue = JSON.parse(minFromString)\n    //         setMinValue(newMinValue)\n    //     }\n    // }\n    return (\n        <div className={s.bothCounters}>\n            <CountSet minValue={minValue} maxValue={maxValue}\n                      setMinValue={changingMinValue}\n                      setMaxValue={changingMaxValue}\n                      setToStorage={setToStorage}\n            />\n           <CountResult minValue={minValue} maxValue={maxValue}/>\n        </div>\n\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}