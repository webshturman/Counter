{"version":3,"sources":["App.module.css","bll/actions.ts","Components/Counter.tsx","Components/Button.tsx","Components/CountResult.tsx","Components/InputSet.tsx","Components/CountSet.tsx","App.tsx","bll/store.ts","reportWebVitals.ts","bll/counter-reducer.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE","Counter","count","maxCount","correctData","error","limitClass","s","limit","className","errorClass","message","Button","callback","title","condition","disabled","buttons","onClick","changeCountResultAC","type","CHANGE_COUNTER_RESULT_TYPE","CountResult","dispatch","useDispatch","useSelector","state","counter","minValue","maxValue","container","buttonBlock","InputSet","value","changingValue","inputError","redInput","spanInputValue","inputValueBlock","spanInputTitle","onChange","e","newInputValue","Number","currentTarget","CountSet","setCorrectData","countSetter","CHANGE_MAX_VALUE_TYPE","payload","changeMaxValueAC","CHANGE_MIN_VALUE_TYPE","changeMinValueAC","App","PreloadedState","useState","bothCounters","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InitialState","rootReducer","combineReducers","action","IncomingState","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,aAAe,0BAA0B,UAAY,uBAAuB,QAAU,qBAAqB,QAAU,qBAAqB,YAAc,yBAAyB,MAAQ,mBAAmB,QAAU,qBAAqB,WAAa,wBAAwB,YAAc,yBAAyB,gBAAkB,6BAA6B,eAAiB,4BAA4B,eAAiB,4BAA4B,SAAW,wB,2CCDjdC,E,+ECYCC,EAAsC,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,YAAYC,EAAW,EAAXA,MACvEC,EAAaJ,IAAUC,EAAWI,IAAEC,MAAQ,GAUlD,OACI,mCAPGH,EACQ,qBAAKI,UAAWF,IAAEG,WAAlB,SAHG,qBAKJN,EAAe,qBAAKK,UAAWH,EAAhB,SAA6BJ,IAAe,qBAAKO,UAAWF,IAAEI,QAAlB,SAN5D,oCCLJC,EAAoC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,UAChE,OACI,+BAAM,wBAAQC,SAAUD,EAAWN,UAAWF,IAAEU,QAASC,QAASL,EAA5D,SAAuEC,O,iBFXzEd,K,yDAAAA,E,yDAAAA,E,wEAAAA,M,KAoBL,IAMMmB,EAAsB,SAACjB,GAChC,MAAO,CAACkB,KAAKpB,EAAaqB,2BAA4BnB,UGT7CoB,EAA8C,SAAC,GAA0B,IAAzBlB,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,MAChEkB,EAAWC,cADgE,EAE9CC,aAA8C,SAAAC,GAAK,OAAIA,EAAMC,WAAzFC,EAF0E,EAE1EA,SAAUC,EAFgE,EAEhEA,SAAS3B,EAFuD,EAEvDA,MAQ1B,OACI,sBAAKO,UAAWF,IAAEuB,UAAlB,UACI,qBAAKrB,UAAWF,IAAEoB,QAAlB,SACI,cAAC,EAAD,CAASzB,MAAOA,EAAOC,SAAU0B,EAAUzB,YAAaA,EAAaC,MAAOA,MAEhF,sBAAKI,UAAWF,IAAEwB,YAAlB,UACI,cAAC,EAAD,CAAQlB,SAZA,WAChBU,EAASJ,EAAoBjB,KAWUY,MAAO,MAAOC,UAAWb,IAAU2B,IAAazB,IAC/E,cAAC,EAAD,CAAQS,SAVD,WACfU,EAASJ,EAAoBS,KASSd,MAAO,QAASC,UAAWb,IAAS0B,IAAaxB,WCxBlF4B,EAAwC,SAAC,GAAwC,IAAvClB,EAAsC,EAAtCA,MAAOmB,EAA+B,EAA/BA,MAAMC,EAAyB,EAAzBA,cAC1DC,EADmF,EAAX9B,MACnDE,IAAE6B,SAAW7B,IAAE8B,eAK1C,OACI,sBAAK5B,UAAWF,IAAE+B,gBAAlB,UACI,uBAAM7B,UAAWF,IAAEgC,eAAnB,UAAoCzB,EAApC,OACA,uBAAOmB,MAAOA,EAAOb,KAAK,SAASoB,SAPhB,SAACC,GACxB,IAAIC,EAAgBC,OAAOF,EAAEG,cAAcX,OAC3CC,EAAcQ,IAKuDjC,UAAW0B,QCD3EU,EAAwC,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,eAAezC,EAAW,EAAXA,MAG5DkB,EAAWC,cAH4D,EAIhDC,aAA8C,SAAAC,GAAK,OAAIA,EAAMC,WAAnFC,EAJsE,EAItEA,SAAUC,EAJ4D,EAI5DA,SAejB,OACI,sBAAKpB,UAAWF,IAAEuB,UAAlB,UACI,sBAAKrB,UAAWF,IAAEwC,YAAlB,UACI,cAAC,EAAD,CAAUjC,MAAO,YAAamB,MAAOJ,EAAUK,cAZnC,SAACQ,GACrBnB,ELPwB,SAACM,GAC7B,MAAO,CAACT,KAAKpB,EAAagD,sBAAuBC,QAAQ,CAACpB,aKM7CqB,CAAiBR,IAC1BI,GAAe,IAUyEzC,MAAOA,IACvF,cAAC,EAAD,CAAUS,MAAO,cAAemB,MAAOL,EAAUM,cAjBrC,SAACQ,GACrBnB,ELNwB,SAACK,GAC7B,MAAO,CAACR,KAAKpB,EAAamD,sBAAuBF,QAAQ,CAACrB,aKK7CwB,CAAiBV,IAC1BI,GAAe,IAe2EzC,MAAOA,OAE7F,qBAAKI,UAAWF,IAAEwB,YAAlB,SACI,cAAC,EAAD,CAAQlB,SAXC,WACjBU,EAASJ,EAAoBS,IAC7BkB,GAAe,IASyBhC,MAAO,MAAOC,UAAWV,UC0B1DgD,IC9DXC,ED8DWD,EAhDf,WAAe,MAekB5B,aAA8C,SAAAC,GAAK,OAAIA,EAAMC,WAAnFC,EAfI,EAeJA,SAAUC,EAfN,EAeMA,SAfN,EAiByB0B,oBAAS,GAjBlC,mBAiBNnD,EAjBM,KAiBO0C,EAjBP,KAkBLzC,EAAQuB,GAAYC,GAAYD,EAAW,EAWjD,OACI,sBAAKnB,UAAWF,IAAEiD,aAAlB,UACI,cAAC,EAAD,CAKUV,eAAgBA,EAChBzC,MAAOA,IAElB,cAAC,EAAD,CAGaD,YAAaA,EAAaC,MAAOA,QEnD1CoD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCPHQ,EAAe,CACtBtC,SAAS,EACTC,SAAS,EACT3B,MAAM,GFAJiE,EAAcC,YAAgB,CAChCzC,QEG0B,WAAiF,IAAhFD,EAA+E,uDAArDwC,EAAcG,EAAuC,uCAC1G,OAAQA,EAAOjD,MACX,KAAKpB,EAAamD,sBAClB,KAAKnD,EAAagD,sBACd,OAAO,2BAAItB,GAAU2C,EAAOpB,SAChC,KAAKjD,EAAaqB,2BACd,OAAO,2BAAIK,GAAX,IAAkBxB,MAAMmE,EAAOnE,MAAO,IAC1C,QAAS,OAAOwB,MFNpB4C,EAAgBC,aAAaC,QAAQ,aACpB,OAAlBF,IACChB,EAAiBmB,KAAKC,MAAMJ,IAIzB,IAAMK,EAAQC,YAAYT,EAAab,GAG9CqB,EAAME,WAAW,WAEbN,aAAaO,QAAQ,YAAaL,KAAKM,UAAUJ,EAAMK,gBGb3DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACI,cAAC,EAAD,QAIRS,SAASC,eAAe,SAM1B5B,M","file":"static/js/main.808558bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bothCounters\":\"App_bothCounters__3gPmO\",\"container\":\"App_container__Gw0hg\",\"buttons\":\"App_buttons__2jeqC\",\"counter\":\"App_counter__1N54d\",\"buttonBlock\":\"App_buttonBlock__2iESY\",\"limit\":\"App_limit__1oH3s\",\"message\":\"App_message__yZwKb\",\"errorClass\":\"App_errorClass__v225h\",\"countSetter\":\"App_countSetter__3mV2S\",\"inputValueBlock\":\"App_inputValueBlock__1qH7v\",\"spanInputTitle\":\"App_spanInputTitle__3ykRX\",\"spanInputValue\":\"App_spanInputValue__1XztC\",\"redInput\":\"App_redInput__2Y172\"};","export enum ACTIONS_TYPE {\r\n    CHANGE_MAX_VALUE_TYPE = 'CounterSet/CHANGE_MAX_VALUE_TYPE',\r\n    CHANGE_MIN_VALUE_TYPE = 'CounterSet/CHANGE_MIN_VALUE_TYPE',\r\n    CHANGE_COUNTER_RESULT_TYPE = 'CounterResult/CHANGE_COUNTER_RESULT_TYPE ',\r\n}\r\nexport type ActionType = changeMinValueType | changeMaxValueType | changeCountResultType\r\n\r\nexport type changeMinValueType = {\r\n    type:ACTIONS_TYPE.CHANGE_MIN_VALUE_TYPE,\r\n    payload: {minValue:number}\r\n\r\n}\r\nexport type changeMaxValueType = {\r\n    type:ACTIONS_TYPE.CHANGE_MAX_VALUE_TYPE,\r\n    payload: {maxValue:number}\r\n}\r\nexport type changeCountResultType = {\r\n    type:ACTIONS_TYPE.CHANGE_COUNTER_RESULT_TYPE,\r\n   count:number\r\n}\r\nexport const changeMinValueAC = (minValue:number):changeMinValueType => {\r\n    return {type:ACTIONS_TYPE.CHANGE_MIN_VALUE_TYPE, payload:{minValue}}\r\n}\r\nexport const changeMaxValueAC = (maxValue:number):changeMaxValueType => {\r\n    return {type:ACTIONS_TYPE.CHANGE_MAX_VALUE_TYPE, payload:{maxValue}}\r\n}\r\nexport const changeCountResultAC = (count:number):changeCountResultType => {\r\n    return {type:ACTIONS_TYPE.CHANGE_COUNTER_RESULT_TYPE, count}\r\n}","import React from 'react';\r\nimport s from '../App.module.css'\r\n\r\n\r\nexport type CounterPropsType = {\r\n    count: number\r\n    maxCount:number\r\n    correctData:boolean\r\n    error:boolean\r\n}\r\n\r\n\r\nexport const Counter: React.FC<CounterPropsType> = ({count, maxCount,correctData,error}) => {\r\n    const limitClass = count === maxCount ? s.limit : ''\r\n    const message =`enter values and press 'set'`\r\n    const errorMessage =`Incorrect value!`\r\n    let renderCounter = () => {\r\n        if(error){\r\n            return <div className={s.errorClass }>{errorMessage}</div>\r\n        } else {\r\n           return correctData ?  <div className={limitClass}>{count}</div> : <div className={s.message}>{message}</div>\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {renderCounter()}\r\n\r\n        </>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport s from '../App.module.css'\r\n\r\nexport type ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    condition: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({callback, title, condition}) => {\r\n    return (\r\n        <span><button disabled={condition} className={s.buttons} onClick={callback}>{title}</button></span>\r\n    )\r\n}","import React from 'react';\r\nimport s from \"../App.module.css\";\r\nimport {Counter} from \"./Counter\";\r\nimport {Button} from \"./Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../bll/store\";\r\nimport {InitialStateType} from \"../bll/counter-reducer\";\r\nimport {changeCountResultAC} from \"../bll/actions\";\r\n\r\ntype CountResultPropsType ={\r\n    // count: number\r\n    // minValue: number\r\n    // maxValue: number\r\n    // setCount: (value:number)=>void\r\n    correctData:boolean\r\n    error:boolean\r\n}\r\n\r\nexport const CountResult: React.FC<CountResultPropsType> = ({correctData, error}) => {\r\n    const dispatch = useDispatch()\r\n    const {minValue, maxValue,count} = useSelector<RootStateType, InitialStateType>( state => state.counter)\r\n\r\n    const changeCount = () => {\r\n        dispatch(changeCountResultAC(count))\r\n    }\r\n    const resetCount = () => {\r\n        dispatch(changeCountResultAC(minValue))\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.counter}>\r\n                <Counter count={count} maxCount={maxValue} correctData={correctData} error={error}/>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <Button callback={changeCount} title={'Inc'} condition={count === maxValue || !correctData}/>\r\n                <Button callback={resetCount} title={'Reset'} condition={count ===minValue || !correctData}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"../App.module.css\";\r\n\r\n\r\n\r\ntype InputSetPropsType = {\r\n    title: string\r\n    value: number\r\n    changingValue: (newInputValue:number)=> void\r\n    error:boolean\r\n}\r\nexport const InputSet: React.FC<InputSetPropsType> = ({title, value,changingValue,error}) => {\r\n    const inputError = error ? s.redInput : s.spanInputValue\r\n    const changeValueHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        let newInputValue = Number(e.currentTarget.value)\r\n        changingValue(newInputValue)\r\n    }\r\n    return (\r\n        <div className={s.inputValueBlock}>\r\n            <span className={s.spanInputTitle}>{title}:</span>\r\n            <input value={value} type=\"number\" onChange={changeValueHandler} className={inputError}/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport s from \"../App.module.css\";\r\nimport {Button} from \"./Button\";\r\nimport {InputSet} from \"./InputSet\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../bll/store\";\r\nimport {InitialStateType} from \"../bll/counter-reducer\";\r\nimport {changeCountResultAC, changeMaxValueAC, changeMinValueAC} from \"../bll/actions\";\r\n\r\ntype CountSetPropsType = {\r\n    // minValue: number\r\n    // maxValue: number\r\n    // setMinValue: (newInputValue:number) => void\r\n    // setMaxValue: (newInputValue:number) => void\r\n    // setCount: (value:number)=>void\r\n    setCorrectData: (correctData:boolean) => void\r\n    error:boolean\r\n}\r\n\r\nexport const CountSet: React.FC<CountSetPropsType> = ({setCorrectData,error}) => {\r\n    // let disabledCondition = minValue >= maxValue || minValue < 0\r\n\r\n    const dispatch = useDispatch()\r\n    const {minValue, maxValue} = useSelector<RootStateType, InitialStateType>( state => state.counter)\r\n\r\n    const changingMinValue =(newInputValue:number)=> {\r\n        dispatch(changeMinValueAC(newInputValue))\r\n        setCorrectData(false)\r\n    }\r\n    const changingMaxValue =(newInputValue:number)=> {\r\n        dispatch(changeMaxValueAC(newInputValue))\r\n        setCorrectData(false)\r\n    }\r\n\r\n    const settingCount = () => {\r\n        dispatch(changeCountResultAC(minValue))\r\n        setCorrectData(true)\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.countSetter}>\r\n                <InputSet title={'Max value'} value={maxValue} changingValue={changingMaxValue} error={error}/>\r\n                <InputSet title={'Start value'} value={minValue} changingValue={changingMinValue} error={error}/>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <Button callback={settingCount} title={'Set'} condition={error}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './App.module.css'\nimport './App.css';\nimport {CountResult} from \"./Components/CountResult\";\nimport {CountSet} from \"./Components/CountSet\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootStateType} from \"./bll/store\";\nimport {InitialStateType} from \"./bll/counter-reducer\";\nimport {changeMaxValueAC, changeMinValueAC} from \"./bll/actions\";\n\n\n// export const getFromStorage = (key:string, defaultValue:number)=> {\n//     let newValue = defaultValue\n//     let storageItem = localStorage.getItem(key);\n//     if(storageItem !== null){\n//         newValue = JSON.parse(storageItem)\n//     }\n//     return newValue\n// }\n// export const setToStorage =(key:string, value:number)=> {\n//     localStorage.setItem(key,JSON.stringify(value));\n// }\n\nfunction App() {\n    // let [minValue, setMinValue] = useState(getFromStorage('set minValue',0))\n    // let [maxValue, setMaxValue] = useState(getFromStorage('set maxValue', 1))\n    // let [count, setCount] = useState(getFromStorage('set count',minValue))\n    // let [correctData, setCorrectData] = useState(true)\n    //  const error = minValue >= maxValue || minValue < 0\n//-----------------------------------------------------------------\n\n    // useEffect(()=> {\n    //     setToStorage('set minValue',minValue);\n    //     setToStorage('set maxValue',maxValue);\n    //     setToStorage('set count',count);\n    // },[minValue,maxValue,count])\n//---------------------------------------------------------------------------------------\n//     const dispatch = useDispatch()\n    const {minValue, maxValue} = useSelector<RootStateType, InitialStateType>( state => state.counter)\n\n    let [correctData, setCorrectData] = useState(true)\n    const error = minValue >= maxValue || minValue < 0\n\n    // const changingMinValue =(newInputValue:number)=> {\n    //     dispatch(changeMinValueAC(newInputValue))\n    //     setCorrectData(false)\n    // }\n    // const changingMaxValue =(newInputValue:number)=> {\n    //     dispatch(changeMaxValueAC(newInputValue))\n    //     setCorrectData(false)\n    // }\n //----------------------------------------------------------------------------------------------\n    return (\n        <div className={s.bothCounters}>\n            <CountSet\n                    // minValue={minValue} maxValue={maxValue}\n                      // setMinValue={changingMinValue}\n                      // setMaxValue={changingMaxValue}\n                      // setCount={setCount}\n                      setCorrectData={setCorrectData}\n                      error={error}\n            />\n           <CountResult\n                        // count={count} minValue={minValue} maxValue={maxValue}\n                        // setCount={setCount}\n                        correctData={correctData} error={error}/>\n        </div>\n\n    )\n}\n\nexport default App;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n// // let PreloadedState= getFromStorage('set state',InitialState)\r\nlet PreloadedState\r\nlet IncomingState = localStorage.getItem('set count');\r\nif(IncomingState !== null){\r\n    PreloadedState = JSON.parse(IncomingState)\r\n}\r\n\r\n\r\nexport const store = createStore(rootReducer, PreloadedState)\r\n\r\n\r\nstore.subscribe( ()=> {\r\n    // localStorage.setItem('set state', JSON.stringify(store.getState()));\r\n    localStorage.setItem('set count', JSON.stringify(store.getState()));\r\n})\r\n\r\n\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ACTIONS_TYPE, ActionType} from \"./actions\";\r\n\r\nexport let InitialState = {\r\n    minValue:0,\r\n    maxValue:1,\r\n    count:0\r\n}\r\nexport type InitialStateType = typeof InitialState\r\n\r\nexport const counterReducer = (state: InitialStateType = InitialState, action:ActionType):InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_MIN_VALUE_TYPE:\r\n        case ACTIONS_TYPE.CHANGE_MAX_VALUE_TYPE:\r\n            return {...state, ...action.payload}\r\n        case ACTIONS_TYPE.CHANGE_COUNTER_RESULT_TYPE:\r\n            return {...state, count:action.count +1}\r\n        default: return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}