{"version":3,"sources":["App.module.css","Components/Counter.tsx","Components/Button.tsx","Components/CountResult.tsx","Components/InputSet.tsx","Components/CountSet.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","count","maxCount","correctData","limitClass","s","limit","className","message","Button","callback","title","condition","disabled","buttons","onClick","CountResult","minValue","maxValue","setCount","container","counter","buttonBlock","InputSet","value","changingValue","inputValueBlock","spanInputTitle","type","onChange","spanInputValue","CountSet","setMaxValue","setMinValue","setCorrectData","disabledCondition","countSetter","getFromStorage","key","defaultValue","newValue","storageItem","localStorage","getItem","JSON","parse","setToStorage","setItem","stringify","App","useState","useEffect","bothCounters","e","newMinValue","Number","currentTarget","newMaxValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8604a62a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bothCounters\":\"App_bothCounters__3gPmO\",\"container\":\"App_container__Gw0hg\",\"buttons\":\"App_buttons__2jeqC\",\"counter\":\"App_counter__1N54d\",\"buttonBlock\":\"App_buttonBlock__2iESY\",\"limit\":\"App_limit__1oH3s\",\"message\":\"App_message__yZwKb\",\"countSetter\":\"App_countSetter__3mV2S\",\"inputValueBlock\":\"App_inputValueBlock__1qH7v\",\"spanInputTitle\":\"App_spanInputTitle__3ykRX\",\"spanInputValue\":\"App_spanInputValue__1XztC\"};","import React from 'react';\r\nimport s from '../App.module.css'\r\n\r\n\r\nexport type CounterPropsType = {\r\n    count: number\r\n    maxCount:number\r\n    correctData:boolean\r\n}\r\n\r\n\r\nexport const Counter: React.FC<CounterPropsType> = ({count, maxCount,correctData}) => {\r\n    const limitClass = count === maxCount ? s.limit : ''\r\n    const message =`enter values and press 'set'`\r\n    // const error =`Incorrect value`\r\n    return (\r\n        <>\r\n            {correctData ? <div className={limitClass}>{count}</div> : <div className={s.message}>{message}</div>}\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport s from '../App.module.css'\r\n\r\nexport type ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    condition: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({callback, title, condition}) => {\r\n    return (\r\n        <span><button disabled={condition} className={s.buttons} onClick={callback}>{title}</button></span>\r\n    )\r\n}","import React from 'react';\r\nimport s from \"../App.module.css\";\r\nimport {Counter} from \"./Counter\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype CountResultPropsType ={\r\n    count: number\r\n    minValue: number\r\n    maxValue: number\r\n    setCount: (value:number)=>void\r\n    correctData:boolean\r\n}\r\n\r\nexport const CountResult: React.FC<CountResultPropsType> = (\r\n    {count, minValue, correctData, maxValue,setCount}\r\n) => {\r\n\r\n    const changeCount = () => {\r\n            setCount(count + 1)\r\n    }\r\n    const resetCount = () => {\r\n        setCount(minValue)\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.counter}>\r\n                <Counter count={count} maxCount={maxValue} correctData={correctData}/>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <Button callback={changeCount} title={'Inc'} condition={count === maxValue || !correctData}/>\r\n                <Button callback={resetCount} title={'Reset'} condition={count ===minValue || !correctData}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"../App.module.css\";\r\n\r\ntype InputSetPropsType = {\r\n    title: string\r\n    value: number\r\n    changingValue: (e:ChangeEvent<HTMLInputElement>)=> void\r\n}\r\nexport const InputSet: React.FC<InputSetPropsType> = ({title, value,changingValue}) => {\r\n    return (\r\n        <div className={s.inputValueBlock}>\r\n            <span className={s.spanInputTitle}>{title}:</span>\r\n            <input value={value} type=\"number\" onChange={changingValue} className={s.spanInputValue}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"../App.module.css\";\r\nimport {Button} from \"./Button\";\r\nimport {InputSet} from \"./InputSet\";\r\n\r\ntype CountSetPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: (e:ChangeEvent<HTMLInputElement>) => void\r\n    setMaxValue: (e:ChangeEvent<HTMLInputElement>) => void\r\n    setCount: (value:number)=>void\r\n    setCorrectData: (correctData:boolean) => void\r\n}\r\n\r\nexport const CountSet: React.FC<CountSetPropsType> = (\r\n    {minValue, maxValue,setMaxValue, setMinValue,setCount,setCorrectData}\r\n) => {\r\n    let disabledCondition = minValue >= maxValue || minValue < 0\r\n    const settingCount = () => {\r\n        setCount(minValue)\r\n        setCorrectData(true)\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.countSetter}>\r\n                <InputSet title={'Max value'} value={maxValue} changingValue={setMaxValue}/>\r\n                <InputSet title={'Start value'} value={minValue} changingValue={setMinValue}/>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <Button callback={settingCount} title={'Set'} condition={disabledCondition}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './App.module.css'\nimport './App.css';\nimport {CountResult} from \"./Components/CountResult\";\nimport {CountSet} from \"./Components/CountSet\";\n\n\nexport const getFromStorage = (key:string, defaultValue:number)=> {\n    let newValue = defaultValue\n    let storageItem = localStorage.getItem(key);\n    if(storageItem !== null){\n        newValue = JSON.parse(storageItem)\n    }\n    return newValue\n}\nexport const setToStorage =(key:string, value:number)=> {\n    localStorage.setItem(key,JSON.stringify(value));\n}\n\nfunction App() {\n    let [minValue, setMinValue] = useState(getFromStorage('set minValue',0))\n    let [maxValue, setMaxValue] = useState(getFromStorage('set maxValue', 1))\n    let [count, setCount] = useState(getFromStorage('set count',minValue))\n    let [correctData, setCorrectData] = useState(true)\n    // const disabledCondition = minValue >= maxValue || minValue < 0\n//-----------------------------------------------------------------\n\n    useEffect(()=> {\n        setToStorage('set minValue',minValue);\n        setToStorage('set maxValue',maxValue);\n        setToStorage('set count',count);\n    },[minValue,maxValue,count])\n//---------------------------------------------------------------------------------------\n    const changingMinValue =(e:ChangeEvent<HTMLInputElement>)=> {\n        let newMinValue = Number(e.currentTarget.value)\n        setMinValue(newMinValue)\n        setCorrectData(false)\n    }\n    const changingMaxValue =(e:ChangeEvent<HTMLInputElement>)=> {\n        let newMaxValue = Number(e.currentTarget.value)\n        setMaxValue(newMaxValue)\n        setCorrectData(false)\n    }\n //----------------------------------------------------------------------------------------------\n    return (\n        <div className={s.bothCounters}>\n            <CountSet minValue={minValue} maxValue={maxValue}\n                      setMinValue={changingMinValue}\n                      setMaxValue={changingMaxValue}\n                      setCount={setCount}\n                      setCorrectData={setCorrectData}\n            />\n           <CountResult count={count} minValue={minValue} maxValue={maxValue}\n                        setCount={setCount}\n                        correctData={correctData}/>\n        </div>\n\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}